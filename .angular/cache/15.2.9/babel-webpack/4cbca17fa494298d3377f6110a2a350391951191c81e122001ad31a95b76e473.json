{"ast":null,"code":"import { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/fetch.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/select\";\nimport * as i10 from \"@angular/material/core\";\nfunction LoginPageComponent_mat_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r1.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", type_r1.viewValue, \" \");\n  }\n}\nexport let LoginPageComponent = /*#__PURE__*/(() => {\n  class LoginPageComponent {\n    _fb;\n    router;\n    _empService;\n    dataSource;\n    paginator;\n    sort;\n    types = [{\n      value: 'adj',\n      viewValue: 'Adjutant'\n    }, {\n      value: 'secoffr',\n      viewValue: 'Security Officer'\n    }, {\n      value: 'adm',\n      viewValue: 'Administrator'\n    }];\n    user;\n    static isLoggedIn = false;\n    constructor(_fb, router, _empService) {\n      this._fb = _fb;\n      this.router = router;\n      this._empService = _empService;\n      this.user = this._fb.group({\n        id: '',\n        name: '',\n        branch: '',\n        unit: '',\n        password: ''\n      });\n    }\n    id;\n    password = '';\n    loginType = '';\n    res;\n    ngOnInit() {\n      LoginPageComponent.isLoggedIn = false;\n    }\n    login() {\n      if (this.loginType == 'adj' || this.loginType == 'secoffr') {\n        this._empService.getOffrById(this.id).subscribe(data => {\n          if (this.password == data.password) {\n            LoginPageComponent.isLoggedIn = true;\n            this.router.navigateByUrl('/display', {\n              state: {\n                user: data\n              }\n            });\n          } else {\n            alert(\"Wrong Password\");\n          }\n        });\n      } else if (this.loginType == 'adm') {\n        this._empService.getAdmById(this.id).subscribe(data => {\n          if (this.password == data.password) {\n            LoginPageComponent.isLoggedIn = true;\n            this.router.navigateByUrl('/adm', {\n              state: {\n                user: data\n              }\n            });\n          } else {\n            alert(\"Wrong Password\");\n          }\n        });\n      } else {\n        LoginPageComponent.isLoggedIn = false;\n        alert(\"Invalid credentials\");\n      }\n    }\n    static ɵfac = function LoginPageComponent_Factory(t) {\n      return new (t || LoginPageComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FetchService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginPageComponent,\n      selectors: [[\"app-login-page\"]],\n      viewQuery: function LoginPageComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatPaginator, 5);\n          i0.ɵɵviewQuery(MatSort, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n        }\n      },\n      decls: 25,\n      vars: 4,\n      consts: [[1, \"bg\"], [1, \"title\"], [3, \"ngSubmit\"], [\"cellspacing\", \"0\"], [2, \"width\", \"250px\"], [\"matInput\", \"\", \"placeholder\", \"Service No\", \"name\", \"id\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"matInput\", \"\", \"placeholder\", \"Password\", \"type\", \"password\", \"name\", \"password\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"loginType\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [3, \"value\"]],\n      template: function LoginPageComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"mat-card-header\")(2, \"mat-card-title\", 1);\n          i0.ɵɵtext(3, \"LOGIN\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"mat-card-content\")(5, \"form\", 2);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginPageComponent_Template_form_ngSubmit_5_listener() {\n            return ctx.login();\n          });\n          i0.ɵɵelementStart(6, \"table\", 3)(7, \"tr\")(8, \"td\")(9, \"mat-form-field\", 4)(10, \"input\", 5);\n          i0.ɵɵlistener(\"ngModelChange\", function LoginPageComponent_Template_input_ngModelChange_10_listener($event) {\n            return ctx.id = $event;\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(11, \"tr\")(12, \"td\")(13, \"mat-form-field\", 4)(14, \"input\", 6);\n          i0.ɵɵlistener(\"ngModelChange\", function LoginPageComponent_Template_input_ngModelChange_14_listener($event) {\n            return ctx.password = $event;\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(15, \"tr\")(16, \"td\")(17, \"mat-form-field\", 4)(18, \"mat-label\");\n          i0.ɵɵtext(19, \"Login Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"mat-select\", 7);\n          i0.ɵɵlistener(\"ngModelChange\", function LoginPageComponent_Template_mat_select_ngModelChange_20_listener($event) {\n            return ctx.loginType = $event;\n          });\n          i0.ɵɵtemplate(21, LoginPageComponent_mat_option_21_Template, 2, 2, \"mat-option\", 8);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(22, \"mat-card-actions\")(23, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function LoginPageComponent_Template_button_click_23_listener() {\n            return ctx.login();\n          });\n          i0.ɵɵtext(24, \"Login\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngModel\", ctx.id);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.password);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngModel\", ctx.loginType);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.types);\n        }\n      },\n      dependencies: [i4.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.NgModel, i1.NgForm, i5.MatButton, i6.MatCard, i6.MatCardActions, i6.MatCardContent, i6.MatCardHeader, i6.MatCardTitle, i7.MatFormField, i7.MatLabel, i8.MatInput, i9.MatSelect, i10.MatOption],\n      styles: [\".bg[_ngcontent-%COMP%]{align-items:center;padding-top:130px;height:92%;width:100%;background-image:url(/assets/su30.png);background-size:cover}.title[_ngcontent-%COMP%]{font-weight:700;color:#000;padding-bottom:10px;font-size:xx-large}\"]\n    });\n  }\n  return LoginPageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}